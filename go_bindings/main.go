package main

import (
	"encoding/base64"
	"fmt"
	"github.com/agostbiro/vdf/go_bindings/generated/vdf"
	"time"
)

const intSizeBits = uint16(2048)
const difficulty = uint64(10000)

func main() {
	// From ceremonyclient
	testCases := [10]string{
		"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",
	}

	fmt.Println("Verifying test vectors")
	for i, testVector := range testCases {
		proofAndChallenge, err := base64.StdEncoding.DecodeString(testVector)
		if err != nil {
			panic(err)
		}
		isOk := vdf.WesolowskiVerify(intSizeBits, proofAndChallenge[516:548], difficulty, proofAndChallenge[:516])
		if !isOk {
			panic("Test verification failed for " + string(rune(i)))
		}
	}
	fmt.Println("Test vectors passed")

	fmt.Println("Test prove/verify")
	solution := vdf.WesolowskiSolve(intSizeBits, []byte{0x01, 0x02, 0x03}, difficulty)
	isOk := vdf.WesolowskiVerify(intSizeBits, []byte{0x01, 0x02, 0x03}, difficulty, solution)
	if !isOk {
		panic("Prove/verify failed")
	} else {
		fmt.Println("Prove/verify succeeded")
	}

	fmt.Println("Benchmarking Rust VDF proving")
	start := time.Now()

	proofs := make([][]byte, 10)
	challenge := []byte{0x01, 0x02, 0x03}
	for i := 0; i < 10; i++ {
		if len(challenge) < 32 {
			// Pad the challenge
			challenge = append(challenge, make([]byte, 32-len(challenge))...)
		}
		proof := vdf.WesolowskiSolve(intSizeBits, challenge[:32], difficulty)
		proofs[i] = append(proof, challenge...)
		challenge = proof
	}

	elapsed := time.Since(start)
	fmt.Printf("Benchmarking Rust proving VDF took %s\n", elapsed)

	//b, err := json.Marshal(proofs)
	//if err != nil {
	//	panic(err)
	//}
	//fmt.Println(string(b))

	fmt.Println("Benchmarking Rust VDF verify")
	start = time.Now()

	for i := 0; i < 10; i++ {
		isOk = vdf.WesolowskiVerify(intSizeBits, proofs[i][516:548], difficulty, proofs[i][:516])
		if !isOk {
			panic("Verify failed")
		}
	}

	elapsed = time.Since(start)
	fmt.Printf("Benchmarking Rust verifying VDF took %s\n", elapsed)
}
